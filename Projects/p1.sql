/*******************************************************************************
   Drop database if it exists
********************************************************************************/
DROP USER p1 CASCADE;
/

/*******************************************************************************
   Create database
********************************************************************************/
CREATE USER p1
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to p1;
GRANT resource to p1;
GRANT create session TO p1;
GRANT create table TO p1;
GRANT create view TO p1;



conn p1/p4ssw0rd
/
/*******************************************************************************
   Drops
********************************************************************************/
ALTER TABLE EMPLOYEE DROP CONSTRAINT FK_MAN_ID;
/
ALTER TABLE REIMBURSEMENT DROP CONSTRAINT FK_EMPLOYEE_REIMBURSEMENT;
/
DROP SEQUENCE EMPLOYEE_SEQUENCE;
/
DROP SEQUENCE MANAGER_SEQUENCE;
/
DROP SEQUENCE REIMBURSEMENT_SEQUENCE;
/
DROP TRIGGER EMPLOYEE_ON_INSERT;
/
DROP TRIGGER REIMBURSEMENT_ON_INSERT;
/
DROP TABLE EMPLOYEE;
/
DROP TABLE REIMBURSEMENT;
/
DROP TABLE TRANSACTION_LOG;
/

/*******************************************************************************
   Table Creation 
********************************************************************************/
CREATE TABLE EMPLOYEE(
EMP_ID NUMBER PRIMARY KEY, 
FIRSTNAME VARCHAR2(30), 
LASTNAME VARCHAR2(30), 
EMAIL VARCHAR2(30),
EMP_PASS VARCHAR2(30),
MAN_ID NUMBER,

CONSTRAINT FK_MAN_ID
FOREIGN KEY(MAN_ID)
REFERENCES EMPLOYEE(EMP_ID)
ON DELETE CASCADE
);
/

CREATE TABLE REIMBURSEMENT(
REIN_ID NUMBER PRIMARY KEY, 
REIN_AMMOUNT NUMBER,
REIN_DATE DATE,
REIN_STATUS VARCHAR2(30),
REIN_TYPE VARCHAR2(30),
REIN_DESCRIPTION VARCHAR2(30),
REIN_RECIPT BLOB,
EMP_ID NUMBER,

CONSTRAINT FK_EMPLOYEE_REIMBURSEMENT
FOREIGN KEY (EMP_ID)
REFERENCES EMPLOYEE(EMP_ID)
);
/

CREATE TABLE TRANSCATION_LOG(
TRANSAC_ID NUMBER PRIMARY KEY,
TRANSAC_DATE DATE,
TRANSAC_STATUS VARCHAR2,
TRANSAC_DESCRIPTION VARCHAR2,
REIN_ID NUMBER,

CONSTRAINT FK_REIMBURSMENT_TRANSACTION_LOG
FOREIGN KEY (REIN_ID)
REFERENCES REIMBURSEMENT(REIN_ID)
);
/

/*******************************************************************************
   Creating Sequences
********************************************************************************/
CREATE SEQUENCE MANAGER_SEQUENCE
START WITH 1
INCREMENT BY 1;
/

CREATE SEQUENCE EMPLOYEE_SEQUENCE
START WITH 100
INCREMENT BY 1;
/

CREATE SEQUENCE REIMBURSEMENT_SEQUENCE
START WITH 1000
INCREMENT BY 1;
/

/*******************************************************************************
   Create Triggers on Inserts
********************************************************************************/
CREATE OR REPLACE TRIGGER EMPLOYEE_ON_INSERT
  BEFORE INSERT ON EMPLOYEE
  FOR EACH ROW
BEGIN
  SELECT EMPLOYEE_SEQUENCE.NEXTVAL, MANAGER_SEQUENCE.NEXTVAL
  INTO :NEW.EMP_ID, :NEW.MAN_ID
  FROM DUAL;
END;

CREATE OR REPLACE TRIGGER REIMBURSEMENT_ON_INSERT
  BEFORE INSERT ON REIMBURSEMENT
  FOR EACH ROW
BEGIN
  SELECT REIMBURSEMENT_SEQUENCE.NEXTVAL
  INTO :NEW.REIN_ID
  FROM DUAL;
END;

/*******************************************************************************
   Store Procedures
********************************************************************************/
CREATE OR REPLACE PROCEDURE INSERT_EMPLOYEE(    -- INSERT_EMPLOYEE
    EMP_ID IN NUMBER, 
    FIRSTNAME IN VARCHAR2, 
    LASTNAME IN VARCHAR2, 
    EMAIL IN VARCHAR2,
    EMP_PASS IN VARCHAR2,
    MAN_ID IN NUMBER)
AS
BEGIN
    INSERT INTO EMPLOYEE VALUES(
        EMPLOYEE_SEQUENCE.NEXTVAL,
        EMPLOYEE_FIRST_NAME,
        EMPLOYEE_LAST_NAME,
        EMPLOYEE_EMAIL,
        EMP_PASSWORD,
        MANAGER_SEQUENCE.NEXTVAL
        );
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_REINBURSMENT(    -- INSERT_EMPLOYEE
    EMPLOYEE_FIRST_NAME IN VARCHAR2,
    EMPLOYEE_LAST_NAME IN VARCHAR2,
    EMPLOYEE_USERNAME IN VARCHAR2,
    EMPLOYEE_PASSWORD IN VARCHAR2)
AS
BEGIN
    INSERT INTO EMPLOYEE VALUES(
        EMPLOYEE_SEQUENCE.NEXTVAL,
        EMPLOYEE_FIRST_NAME,
        EMPLOYEE_LAST_NAME,
        EMPLOYEE_USERNAME,
        EMPLOYEE_PASSWORD);
    COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE INSERT_CAR(         -- INSERT_CAR
    CAR_YEAR IN NUMBER,
    CAR_MAKE IN VARCHAR2,
    CAR_MODEL IN VARCHAR2,
    CAR_MILEAGE IN NUMBER,
    CAR_PRICE IN NUMBER,
    CAR_BALANCE IN NUMBER,
    OWNER_ID IN NUMBER)
AS
BEGIN
    INSERT INTO CAR VALUES(
        CAR_SEQUENCE.NEXTVAL,
        CAR_YEAR,
        CAR_MAKE,
        CAR_MODEL,
        CAR_MILEAGE,
        CAR_PRICE,
        CAR_BALANCE,
        OWNER_ID);
    COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE UPDATE_CAR(         -- UPDATE_CAR
    P_CAR_ID IN NUMBER,
    P_CAR_YEAR IN NUMBER,
    P_CAR_MAKE IN VARCHAR2,
    P_CAR_MODEL IN VARCHAR2,
    P_CAR_MILEAGE IN NUMBER,
    P_CAR_PRICE IN NUMBER,
    P_CAR_BALANCE IN NUMBER,
    P_OWNER_ID IN NUMBER)
AS
BEGIN
    UPDATE CAR SET
        CAR_YEAR = P_CAR_YEAR,
        CAR_MAKE = P_CAR_MAKE,
        CAR_MODEL = P_CAR_MODEL,
        CAR_MILEAGE = P_CAR_MILEAGE,
        CAR_PRICE = P_CAR_PRICE,
        CAR_BALANCE = P_CAR_BALANCE,
        OWNER_ID = P_OWNER_ID
    WHERE CAR_ID = P_CAR_ID;
    COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE INSERT_PAYMENT(     -- INSERT_PAYMENT
    PAYMENT_AMOUNT IN NUMBER,
    CAR_ID IN NUMBER,
    CUSTOMER_ID IN NUMBER)
AS
BEGIN
    INSERT INTO PAYMENT VALUES(
        PAYMENT_SEQUENCE.NEXTVAL,
        PAYMENT_AMOUNT,
        CAR_ID,
        CUSTOMER_ID);
    COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE INSERT_OFFER(       -- INSERT_OFFER
    OFFER_STATUS IN VARCHAR2,
    OFFER_AMOUNT IN NUMBER,
    CAR_ID IN NUMBER,
    CUSTOMER_ID IN NUMBER)
AS
BEGIN
    INSERT INTO OFFER VALUES(
        OFFER_SEQUENCE.NEXTVAL,
        OFFER_STATUS,
        OFFER_AMOUNT,
        CAR_ID,
        CUSTOMER_ID);
    COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE UPDATE_OFFER(       -- UPDATE_OFFER
    P_OFFER_ID IN NUMBER,
    P_OFFER_STATUS IN VARCHAR2,
    P_OFFER_AMOUNT IN NUMBER,
    P_CAR_ID IN NUMBER,
    P_CUSTOMER_ID IN NUMBER)
AS
BEGIN
    UPDATE OFFER SET
        OFFER_STATUS = P_OFFER_STATUS,
        OFFER_AMOUNT = P_OFFER_AMOUNT,
        CAR_ID = P_CAR_ID,
        CUSTOMER_ID = P_CUSTOMER_ID
    WHERE OFFER_ID = P_OFFER_ID;
    COMMIT;
END;
/
